package Character;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Scanner;


public class CharacterList  {

    LinkedList<Character> character = new LinkedList<>();
    
    public CharacterList() throws FileNotFoundException {                   
        try (
            Scanner s = new Scanner (new FileReader("CharacterList.txt"))) {
            while(s.hasNextLine()) {
                String record = s.nextLine();
                String[] field = record.split(" ");
                
                String name = field[0]+" "+field[1];
                int height = Integer.parseInt(field[2]);
                int weight = Integer.parseInt(field[3]);
                int strength = Integer.parseInt(field[4]);
                int agility = Integer.parseInt(field[5]);
                int intelligence = Integer.parseInt(field[6]);
                int coordination = Integer.parseInt(field[7]);
                int leadership = Integer.parseInt(field[8]);
                
                Character c = new Character (name, height, weight, strength, agility, intelligence, coordination, leadership);
                
                character.add(c);
            }
        }
    }
    
    
    //add new character into linked list
    public void addCharacter(Character o) {
        character.add(o);
    } 
    
    
    
    //remove character from linked list                              
    public Character removeCharacter(String name){
        //remove from linked list
        for(int i = 0; i < character.size(); i++)
            if(character.get(i).getName().equals(name))
                return character.remove(i);
        
        return null;
    }     

    
    //get new Character and store in text file
    public void close (){
        try{
            FileWriter file = new FileWriter("CharacterList.txt", false);
            
            for(int i = 0; i < character.size(); i++){
                Character charac = character.get(i);
                file.write(charac.getName());
                file.write(' ');
                file.write(charac.getHeight());
                file.write(' ');
                file.write(charac.getWeight());
                file.write(' ');
                file.write(charac.getStrength());
                file.write(' ');
                file.write(charac.getAgility());
                file.write(' ');
                file.write(charac.getIntelligence());
                file.write(' ');
                file.write(charac.getCoordination());
                file.write(' ');
                file.write(charac.getLeadership());
                file.write('\n');
            }
            file.close();
        }  catch (IOException e){
        }
    }
    
    
    
    //sort methods
    
    public Character[] sortWeight(){
        Character[] array = (Character[])character.toArray();
        Arrays.sort(array, (o1, o2)->{return Integer.compare(o1.getWeight(), o2.getWeight());});
        return array;
    }
    
    public Character[] sortHeight(){
        Character[] array = (Character[])character.toArray();
        Arrays.sort(array, (o1, o2)->{return Integer.compare(o1.getHeight(), o2.getHeight());});
        return array;
    }
    
    public Character[] sortStrength(){
        Character[] array = (Character[])character.toArray();
        Arrays.sort(array, (o1, o2)->{return Integer.compare(o1.getStrength(), o2.getStrength());});
        return array;
    }
    
    public Character[] sortAgility(){
        Character[] array = (Character[])character.toArray();
        Arrays.sort(array, (o1, o2)->{return Integer.compare(o1.getAgility(), o2.getAgility());});
        return array;
    }
    
    public Character[] sortIntelligence(){
        Character[] array = (Character[])character.toArray();
        Arrays.sort(array, (o1, o2)->{return Integer.compare(o1.getIntelligence(), o2.getIntelligence());});
        return array;
    }
    
    public Character[] sortCoordination(){
        Character[] array = (Character[])character.toArray();
        Arrays.sort(array, (o1, o2)->{return Integer.compare(o1.getCoordination(), o2.getCoordination());});
        return array;
    }
    
    public Character[] sortLeadership(){
        Character[] array = (Character[])character.toArray();
        Arrays.sort(array, (o1, o2)->{return Integer.compare(o1.getLeadership(), o2.getLeadership());});
        return array;
    }
    
    
    
   //binary sort methods
  
    public static int binarySearchWeight(Character[] array, int weight){
        int low = 0;
        int high = array.length -1;
        
	      while (low <= high) {

		        // Finding the mid using floor division
		        int mid = low + (high - low) / 2;

		        // Target value is present at the middle of the array
		        if (array[mid].getWeight()==weight) 
			      return mid;
		
		        // Target value is present in the low subarray
		        else if (array[mid].getWeight() > weight) 
			      high = mid - 1;

		        // Target value is present in the high subarray
		        else if (array[mid].getWeight() < weight) 
			      low = mid + 1;
	      }
	      // Target value is not present in the array
	      return -1;  
    }
    
    
    public static int binarySearchHeight(Character[] array, int height){
        int low = 0;
        int high = array.length -1;
        
	      while (low <= high) {

		        int mid = low + (high - low) / 2;

		        if (array[mid].getHeight()==height) 
			          return mid;
		
		        else if (array[mid].getHeight() > height) 
			          high = mid - 1;

		        else if (array[mid].getHeight() < height) 
			          low = mid + 1;
		
	      }
	      return -1;  
    }
    
    public static int binarySearchStrength(Character[] array, int strength){
        int low = 0;
        int high = array.length -1;
        
	      while (low <= high) {

		        int mid = low + (high - low) / 2;

		        if (array[mid].getStrength()==strength) 
			          return mid;
		
		        else if (array[mid].getStrength() > strength) 
			          high = mid - 1;

		        else if (array[mid].getStrength() < strength) 
			          low = mid + 1;
	          }
            
	      return -1;  
    }
    
    public static int binarySearchAgility(Character[] array, int agility){
        int low = 0;
        int high = array.length -1;
        
	      while (low <= high) {

		        int mid = low + (high - low) / 2;

		        if (array[mid].getAgility()==agility) 
			          return mid;
		
		        else if (array[mid].getAgility() > agility) 
			          high = mid - 1;

		        else if (array[mid].getAgility() < agility) 
			          low = mid + 1;
	      }
        
	      return -1;  
    }
    
    public static int binarySearchIntelligence(Character[] array, int intelligence){
        int low = 0;
        int high = array.length -1;
        
	      while (low <= high) {

		        int mid = low + (high - low) / 2;

            if (array[mid].getIntelligence()==intelligence) 
			          return mid;
		
		        else if (array[mid].getIntelligence() > intelligence) 
			          high = mid - 1;

		        else if (array[mid].getIntelligence() < intelligence) 
			          low = mid + 1;
	          }
            
	      return -1;  
    }
    
    
    public static int binarySearchCoordination(Character[] array, int coordination){
        int low = 0;
        int high = array.length -1;
        
	      while (low <= high) {

		        int mid = low + (high - low) / 2;

		        if (array[mid].getCoordination()==coordination) 
			          return mid;
		
		        else if (array[mid].getCoordination() > coordination) 
			          high = mid - 1;

		        else if (array[mid].getCoordination() < coordination) 
			          low = mid + 1;
	      }
        
	      return -1;  
    }
    
    
    public static int binarySearchLeadership(Character[] array, int leadership){
        int low = 0;
        int high = array.length -1;
        
	      while (low <= high) {

		        int mid = low + (high - low) / 2;

		        if (array[mid].getLeadership()==leadership) 
			          return mid;
		
		        else if (array[mid].getLeadership() > leadership) 
			          high = mid - 1;

		        else if (array[mid].getLeadership() < leadership) 
			          low = mid + 1;
        }
        
	      return -1;  
    }

}
